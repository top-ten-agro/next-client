import { useMemo, useState } from "react";
import Head from "next/head";
import { useQuery } from "@tanstack/react-query";
import { useSession } from "next-auth/react";
import {
  ResponsiveContainer,
  LineChart,
  Line,
  CartesianGrid,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
} from "recharts";
import Container from "@mui/material/Container";
import Box from "@mui/material/Box";
import Grid from "@mui/material/Unstable_Grid2";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Typography from "@mui/material/Typography";
import LinearProgress from "@mui/material/LinearProgress";
import ToggleButtonGroup from "@mui/material/ToggleButtonGroup";
import ToggleButton from "@mui/material/ToggleButton";
import StoreIcon from "@mui/icons-material/Store";
import CategoryIcon from "@mui/icons-material/Category";
import ShoppingCartCheckoutIcon from "@mui/icons-material/ShoppingCartCheckout";
import PeopleIcon from "@mui/icons-material/People";
import useAxiosAuth from "@/lib/hooks/useAxiosAuth";
import PageToolbar from "@/components/PageToolbar";
import dayjs from "dayjs";
import { toBdt } from "@/lib/formatter";
import type { HomepageData } from "@/lib/types";

const Home = () => {
  const { data: session } = useSession();
  const axios = useAxiosAuth();
  const [days, setDays] = useState(7);
  const { data, isLoading } = useQuery(
    ["homepage", session?.user.id, days],
    async () => {
      const { data } = await axios.get<HomepageData>(
        `api/homepage?days=${days}`
      );
      return data;
    },
    {
      keepPreviousData: true,
    }
  );
  const dataPoints = useMemo(() => {
    const today = dayjs();
    const dateList = [];
    for (let i = 0; i < days; i++) {
      const date = today.subtract(i, "day");
      dateList.push(date.format("YYYY-MM-DD"));
    }
    return dateList.map((date) => {
      const trx = data?.transactions.find(
        (trx) => trx.created_at__date === date
      );
      const order = data?.orders.find(
        (order) => order.created_at__date === date
      );
      return {
        date: dayjs(date).format("DD/MM/YY"),
        recovery: trx?.total_cash_in ?? 0,
        cash_out: trx?.total_cash_out ?? 0,
        sales: order?.sales ?? 0,
      };
    });
  }, [days, data]);
  return (
    <>
      <Head>
        <title>TopTen Agro</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container sx={{ pt: 2 }}>
        <PageToolbar heading="Top Ten Agro Ltd." />
        {isLoading ? (
          <LinearProgress />
        ) : data ? (
          <Box>
            <Grid container spacing={2}>
              <Grid xs={6} md={3}>
                <InfoCard icon={StoreIcon} label="Depots" value={data.depots} />
              </Grid>
              <Grid xs={6} md={3}>
                <InfoCard
                  icon={PeopleIcon}
                  label="Customers"
                  value={data.customers}
                />
              </Grid>
              <Grid xs={6} md={3}>
                <InfoCard
                  icon={CategoryIcon}
                  label="Products"
                  value={data.products}
                />
              </Grid>

              <Grid xs={6} md={3}>
                <InfoCard
                  icon={ShoppingCartCheckoutIcon}
                  label="Stock"
                  value={data.stock}
                />
              </Grid>
            </Grid>
            <Box sx={{ mt: 3 }} />
            Show chart for: &nbsp;
            <ToggleButtonGroup
              size="small"
              exclusive
              value={days}
              onChange={(e, val) => (val ? setDays(val as number) : null)}
            >
              <ToggleButton value={7}>7 days</ToggleButton>
              <ToggleButton value={15}>15 days</ToggleButton>
              <ToggleButton value={30}>30 days</ToggleButton>
            </ToggleButtonGroup>
            <Box sx={{ mt: 1 }} />
            <Box sx={{ display: { sm: "none" } }}>
              <InfoChart data={dataPoints.slice().reverse()} aspect={1.5} />
            </Box>
            <Box sx={{ display: { xs: "none", sm: "block" } }}>
              <InfoChart data={dataPoints.slice().reverse()} aspect={3} />
            </Box>
          </Box>
        ) : null}
      </Container>
    </>
  );
};

export default Home;

function InfoCard({
  icon: CardIcon,
  label,
  value,
}: {
  icon: typeof StoreIcon;
  label: string;
  value: number | string;
}) {
  return (
    <Card>
      <CardContent
        sx={{
          p: "10px !important",
          display: "flex",
          gap: { xs: 1, sm: 2 },
          alignItems: "center",
        }}
      >
        <CardIcon sx={{ fontSize: { xs: 36, sm: 48 } }} color="action" />

        <Box sx={{ flex: 0 }}>
          <Typography variant="body1" fontWeight="regular" gutterBottom>
            {label}
          </Typography>
          <Typography variant="h5">{value}</Typography>
        </Box>
      </CardContent>
    </Card>
  );
}

const InfoChart = ({
  data,
  aspect,
}: {
  data: Array<{
    date: string;
    recovery: number;
    sales: number;
  }>;
  aspect: number;
}) => (
  <ResponsiveContainer width={"99%"} aspect={aspect}>
    <LineChart
      data={data}
      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
      style={{ minWidth: 300 }}
    >
      <CartesianGrid strokeDasharray="3 3" />
      <XAxis dataKey="date" fontSize={12} />
      <YAxis
        tickFormatter={(val) =>
          toBdt(val as number, { decimal: 0, notation: "compact" })
        }
        fontSize={12}
        width={25}
      />
      <Tooltip />
      <Legend />
      <Line
        type="monotone"
        dataKey="recovery"
        label="Recovery"
        stroke="#8884d8"
        animationDuration={200}
        isAnimationActive={false}
      />

      <Line
        type="monotone"
        dataKey="sales"
        label="Sales"
        stroke="#82ca9d"
        animationDuration={200}
        isAnimationActive={false}
      />
    </LineChart>
  </ResponsiveContainer>
);
